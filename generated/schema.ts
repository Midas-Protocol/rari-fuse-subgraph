// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Ctoken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Ctoken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Ctoken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Ctoken", id.toString(), this);
  }

  static load(id: string): Ctoken | null {
    return store.get("Ctoken", id) as Ctoken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlying(): string {
    let value = this.get("underlying");
    return value.toString();
  }

  set underlying(value: string) {
    this.set("underlying", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get reserveFactor(): BigInt {
    let value = this.get("reserveFactor");
    return value.toBigInt();
  }

  set reserveFactor(value: BigInt) {
    this.set("reserveFactor", Value.fromBigInt(value));
  }

  get adminFee(): BigInt {
    let value = this.get("adminFee");
    return value.toBigInt();
  }

  set adminFee(value: BigInt) {
    this.set("adminFee", Value.fromBigInt(value));
  }

  get fuseFee(): BigInt {
    let value = this.get("fuseFee");
    return value.toBigInt();
  }

  set fuseFee(value: BigInt) {
    this.set("fuseFee", Value.fromBigInt(value));
  }

  get borrowRatePerBlock(): BigInt {
    let value = this.get("borrowRatePerBlock");
    return value.toBigInt();
  }

  set borrowRatePerBlock(value: BigInt) {
    this.set("borrowRatePerBlock", Value.fromBigInt(value));
  }

  get supplyRatePerBlock(): BigInt {
    let value = this.get("supplyRatePerBlock");
    return value.toBigInt();
  }

  set supplyRatePerBlock(value: BigInt) {
    this.set("supplyRatePerBlock", Value.fromBigInt(value));
  }

  get totalBorrow(): BigInt {
    let value = this.get("totalBorrow");
    return value.toBigInt();
  }

  set totalBorrow(value: BigInt) {
    this.set("totalBorrow", Value.fromBigInt(value));
  }

  get totalBorrowUSD(): BigInt {
    let value = this.get("totalBorrowUSD");
    return value.toBigInt();
  }

  set totalBorrowUSD(value: BigInt) {
    this.set("totalBorrowUSD", Value.fromBigInt(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get liquidityUSD(): BigInt {
    let value = this.get("liquidityUSD");
    return value.toBigInt();
  }

  set liquidityUSD(value: BigInt) {
    this.set("liquidityUSD", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalSupplyUSD(): BigInt {
    let value = this.get("totalSupplyUSD");
    return value.toBigInt();
  }

  set totalSupplyUSD(value: BigInt) {
    this.set("totalSupplyUSD", Value.fromBigInt(value));
  }

  get totalReserves(): BigInt {
    let value = this.get("totalReserves");
    return value.toBigInt();
  }

  set totalReserves(value: BigInt) {
    this.set("totalReserves", Value.fromBigInt(value));
  }

  get totalAdminFees(): BigInt {
    let value = this.get("totalAdminFees");
    return value.toBigInt();
  }

  set totalAdminFees(value: BigInt) {
    this.set("totalAdminFees", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get underlyingBalance(): BigInt {
    let value = this.get("underlyingBalance");
    return value.toBigInt();
  }

  set underlyingBalance(value: BigInt) {
    this.set("underlyingBalance", Value.fromBigInt(value));
  }

  get borrowAPR(): BigDecimal | null {
    let value = this.get("borrowAPR");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set borrowAPR(value: BigDecimal | null) {
    if (value === null) {
      this.unset("borrowAPR");
    } else {
      this.set("borrowAPR", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get supplyAPY(): BigDecimal | null {
    let value = this.get("supplyAPY");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set supplyAPY(value: BigDecimal | null) {
    if (value === null) {
      this.unset("supplyAPY");
    } else {
      this.set("supplyAPY", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get totalSeizedTokens(): BigInt {
    let value = this.get("totalSeizedTokens");
    return value.toBigInt();
  }

  set totalSeizedTokens(value: BigInt) {
    this.set("totalSeizedTokens", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockCreated(): BigInt {
    let value = this.get("blockCreated");
    return value.toBigInt();
  }

  set blockCreated(value: BigInt) {
    this.set("blockCreated", Value.fromBigInt(value));
  }

  get comptroller(): Bytes {
    let value = this.get("comptroller");
    return value.toBytes();
  }

  set comptroller(value: Bytes) {
    this.set("comptroller", Value.fromBytes(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(value as Bytes));
    }
  }

  get assets(): Array<string> | null {
    let value = this.get("assets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set assets(value: Array<string> | null) {
    if (value === null) {
      this.unset("assets");
    } else {
      this.set("assets", Value.fromStringArray(value as Array<string>));
    }
  }

  get index(): BigInt | null {
    let value = this.get("index");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt | null) {
    if (value === null) {
      this.unset("index");
    } else {
      this.set("index", Value.fromBigInt(value as BigInt));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get priceOracle(): Bytes {
    let value = this.get("priceOracle");
    return value.toBytes();
  }

  set priceOracle(value: Bytes) {
    this.set("priceOracle", Value.fromBytes(value));
  }

  get closeFactor(): BigInt | null {
    let value = this.get("closeFactor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closeFactor(value: BigInt | null) {
    if (value === null) {
      this.unset("closeFactor");
    } else {
      this.set("closeFactor", Value.fromBigInt(value as BigInt));
    }
  }

  get liquidationIncentive(): BigInt | null {
    let value = this.get("liquidationIncentive");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationIncentive(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidationIncentive");
    } else {
      this.set("liquidationIncentive", Value.fromBigInt(value as BigInt));
    }
  }

  get maxAssets(): BigInt | null {
    let value = this.get("maxAssets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxAssets(value: BigInt | null) {
    if (value === null) {
      this.unset("maxAssets");
    } else {
      this.set("maxAssets", Value.fromBigInt(value as BigInt));
    }
  }

  get totalBorrowUSD(): BigInt {
    let value = this.get("totalBorrowUSD");
    return value.toBigInt();
  }

  set totalBorrowUSD(value: BigInt) {
    this.set("totalBorrowUSD", Value.fromBigInt(value));
  }

  get totalLiquidityUSD(): BigInt {
    let value = this.get("totalLiquidityUSD");
    return value.toBigInt();
  }

  set totalLiquidityUSD(value: BigInt) {
    this.set("totalLiquidityUSD", Value.fromBigInt(value));
  }

  get totalSupplyUSD(): BigInt {
    let value = this.get("totalSupplyUSD");
    return value.toBigInt();
  }

  set totalSupplyUSD(value: BigInt) {
    this.set("totalSupplyUSD", Value.fromBigInt(value));
  }

  get totalSeizedTokens(): BigInt {
    let value = this.get("totalSeizedTokens");
    return value.toBigInt();
  }

  set totalSeizedTokens(value: BigInt) {
    this.set("totalSeizedTokens", Value.fromBigInt(value));
  }
}

export class UnderlyingAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UnderlyingAsset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnderlyingAsset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnderlyingAsset", id.toString(), this);
  }

  static load(id: string): UnderlyingAsset | null {
    return store.get("UnderlyingAsset", id) as UnderlyingAsset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get ctokens(): Array<string> | null {
    let value = this.get("ctokens");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set ctokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("ctokens");
    } else {
      this.set("ctokens", Value.fromStringArray(value as Array<string>));
    }
  }

  get pools(): Array<string> | null {
    let value = this.get("pools");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pools(value: Array<string> | null) {
    if (value === null) {
      this.unset("pools");
    } else {
      this.set("pools", Value.fromStringArray(value as Array<string>));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get totalBorrow(): BigInt {
    let value = this.get("totalBorrow");
    return value.toBigInt();
  }

  set totalBorrow(value: BigInt) {
    this.set("totalBorrow", Value.fromBigInt(value));
  }

  get totalBorrowUSD(): BigInt {
    let value = this.get("totalBorrowUSD");
    return value.toBigInt();
  }

  set totalBorrowUSD(value: BigInt) {
    this.set("totalBorrowUSD", Value.fromBigInt(value));
  }

  get totalLiquidity(): BigInt {
    let value = this.get("totalLiquidity");
    return value.toBigInt();
  }

  set totalLiquidity(value: BigInt) {
    this.set("totalLiquidity", Value.fromBigInt(value));
  }

  get totalLiquidityUSD(): BigInt {
    let value = this.get("totalLiquidityUSD");
    return value.toBigInt();
  }

  set totalLiquidityUSD(value: BigInt) {
    this.set("totalLiquidityUSD", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalSupplyUSD(): BigInt {
    let value = this.get("totalSupplyUSD");
    return value.toBigInt();
  }

  set totalSupplyUSD(value: BigInt) {
    this.set("totalSupplyUSD", Value.fromBigInt(value));
  }
}

export class Utility extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Utility entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Utility entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Utility", id.toString(), this);
  }

  static load(id: string): Utility | null {
    return store.get("Utility", id) as Utility | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethPriceInDai(): BigInt {
    let value = this.get("ethPriceInDai");
    return value.toBigInt();
  }

  set ethPriceInDai(value: BigInt) {
    this.set("ethPriceInDai", Value.fromBigInt(value));
  }

  get priceOracle(): Bytes {
    let value = this.get("priceOracle");
    return value.toBytes();
  }

  set priceOracle(value: Bytes) {
    this.set("priceOracle", Value.fromBytes(value));
  }
}
